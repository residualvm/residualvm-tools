#!/bin/sh
#
# configure -- custom configure script for ResidualVM.
#
# ResidualVM is the legal property of its developers, whose names
# are too numerous to list here. Please refer to the COPYRIGHT
# file distributed with this source distribution.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#

# Save the current environment variables for next runs
SAVED_CONFIGFLAGS=$@
SAVED_LDFLAGS=$LDFLAGS
SAVED_CXX=$CXX
SAVED_CXXFLAGS=$CXXFLAGS
SAVED_CPPFLAGS=$CPPFLAGS
SAVED_ASFLAGS=$ASFLAGS
SAVED_WINDRESFLAGS=$WINDRESFLAGS

# Use environment vars if set
CXXFLAGS="$CXXFLAGS $CPPFLAGS"

# Backslashes into forward slashes:
# The following OS/2 specific code is performed to deal with handling of backslashes by ksh.
# Borrowed from the Sane configure script

if test "$ac_emxsupport" != "no" -a "$ac_emxsupport" != "NO"; then
	ac_save_IFS="$IFS"
	IFS="\\"
	ac_TEMP_PATH=
	for ac_dir in $PATH; do
		IFS=$ac_save_IFS
		if test -z "$ac_TEMP_PATH"; then
			ac_TEMP_PATH="$ac_dir"
		else
			ac_TEMP_PATH="$ac_TEMP_PATH/$ac_dir"
		fi
	done
	PATH="$ac_TEMP_PATH"
	export PATH
	unset ac_TEMP_PATH
fi

set_var() {
	eval ${1}='${2}'
}

get_var() {
	eval echo \$${1}
}

#
# Default settings
#
#ResidualVM defaults: mpeg2=auto, faad=no, opengles=no
#mt32emu=no, translation=no
#
# Default lib behaviour yes/no/auto
_vorbis=auto
_tremor=auto
_tremolo=no
_flac=auto
_mad=auto
_alsa=auto
_seq_midi=auto
_timidity=auto
_zlib=auto
_sparkle=auto
_png=no
_mpeg2=auto
_theoradec=auto
_faad=no
_fluidsynth=auto
_opengl=auto
_opengles=no
_readline=auto
_freetype2=auto
_taskbar=yes
_updates=no
_libunity=auto
# Default option behaviour yes/no
_debug_build=auto
_release_build=auto
_optimizations=auto
_verbose_build=no
_text_console=no
_mt32emu=no
_build_scalers=yes
_build_hq_scalers=yes
_enable_prof=no
_global_constructors=no
_bink=yes
# Default vkeybd/keymapper options
_vkeybd=no
_keymapper=no
# GUI translation options
_translation=no
# Default platform settings
_backend=sdl
_16bit=auto
_savegame_timestamp=auto
_dynamic_modules=no
_elf_loader=no
_plugins_default=static
_plugin_prefix=
_plugin_suffix=
_nasm=auto
_optimization_level=
_default_optimization_level=-O2
# Default commands
_ranlib=ranlib
_strip=strip
_ar="ar cru"
_as="as"
_windres=windres
_win32path="C:/residualvm-tools"
_aos4path="Games:ResidualVM-tools"
_stagingpath="staging"
_staticlibpath=/sw
_sdlconfig=sdl-config
_freetypeconfig=freetype-config
_sdlpath="$PATH"
_freetypepath="$PATH"
_nasmpath="$PATH"
NASMFLAGS=""
NASM=""
_tainted_build=no
# The following variables are automatically detected, and should not
# be modified otherwise. Consider them read-only.
_posix=no
_endian=unknown
_need_memalign=yes
_have_x86=no



# Directories for installing ScummVM.
# This list is closely based on what GNU autoconf does,
# although the default value for datadir differs.
# Like GNU autoconf, we distinguish datadir and datarootdir
# to make it possible to change e.g. the location of the
# man pages independently of that of the engine data files,
# which are placed inside $datadir/residualvm
prefix=NONE
exec_prefix=NONE
bindir='${exec_prefix}/bin'
libdir='${exec_prefix}/lib'
datarootdir='${prefix}/share'
datadir='${datarootdir}/residualvm'
mandir='${datarootdir}/man'
docdir='${datarootdir}/doc/residualvm'
#localedir='${datarootdir}/locale'

# For cross compiling
_host=""
_host_cpu=""
_host_vendor=""
_host_os=""
_host_alias=""

_srcdir=`dirname $0`
_port_mk="ports.mk"

# Use temp files in the build directory
TMPO=./residualvm-conf
TMPC=${TMPO}.cpp
TMPLOG=config.log

cc_check_no_clean() {
	echo >> "$TMPLOG"
	cat "$TMPC" >> "$TMPLOG"
	echo >> "$TMPLOG"
	echo "$CXX $LDFLAGS $CXXFLAGS $TMPC -o $TMPO$HOSTEXEEXT $@" >> "$TMPLOG"
	rm -f "$TMPO$HOSTEXEEXT"
	( $CXX $LDFLAGS $CXXFLAGS "$TMPC" -o "$TMPO$HOSTEXEEXT" "$@" ) >> "$TMPLOG" 2>&1
	TMPR="$?"
	echo "return code: $TMPR" >> "$TMPLOG"
	echo >> "$TMPLOG"
	return "$TMPR"
}

cc_check_clean() {
	rm -rf $TMPC $TMPO $TMPO.o $TMPO.dSYM $TMPO$HOSTEXEEXT "$@"
}

cc_check() {
	cc_check_no_clean "$@"
	TMPR="$?"
	cc_check_clean
	return "$TMPR"
}

cc_check_define() {
cat > $TMPC << EOF
int main(void) {
	#ifndef $1
	syntax error
	#endif
	return 0;
}
EOF
	cc_check -c
	return $?
}

gcc_get_define() {
	echo "" | $CXX -dM -E - | fgrep "$1" | head -n1 | cut -d ' ' -f 3-
}

#
# Function to provide echo -n for bourne shells that don't have it
#
echo_n() {
	printf "$@"
}

echocheck() {
	echo_n "Checking for $@... "
}

# Add a line of data to config.mk.
add_line_to_config_mk() {
	_config_mk_data="$_config_mk_data"'
'"$1"
}

# Add a line of data to config.h.
add_line_to_config_h() {
	_config_h_data="$_config_h_data"'
'"$1"
}

# Conditionally add a line of data to config.h. Takes two parameters:
# The first one can be set to 'no' to "comment out" the line, i.e.
# make it ineffective, use 'yes' otherwise.
# The second param is the line to insert.
add_to_config_h_if_yes() {
	if test "$1" = yes ; then
		add_line_to_config_h "$2"
	else
		add_line_to_config_h "/* $2 */"
	fi
}

# Conditionally add a line of data to config.mk. Takes two parameters:
# The first one can be set to 'no' to "comment out" the line, i.e.
# make it ineffective, use 'yes' otherwise.
# The second param is the line to insert.
add_to_config_mk_if_yes() {
	if test "$1" = yes ; then
		add_line_to_config_mk "$2"
	else
		add_line_to_config_mk "# $2"
	fi
}

# Conditionally add a '#define' line to config.h. Takes two parameters:
# The first one can be set to 'yes' or 'no'. If 'yes' is used, then
# the line "#define $2" is added to config.h, otherwise "#undef $2".
define_in_config_h_if_yes() {
	if test "$1" = yes ; then
		add_line_to_config_h "#define $2"
	else
		add_line_to_config_h "#undef $2"
	fi
}

# Conditionally add definitions to config.h and config.mk. Takes two parameters:
# The first one can be set to 'yes' or 'no'. If 'yes' is used, then
# the line "#define $2" is added to config.h and "$2 = 1" to config.mk.
# Otherwise "#undef $2" is added to config.h and "# $2 = 1" to config.mk
define_in_config_if_yes() {
	if test "$1" = yes ; then
		add_line_to_config_h "#define $2"
		add_line_to_config_mk "$2 = 1"
	else
		add_line_to_config_h "#undef $2"
		add_line_to_config_mk "# $2 = 1"
	fi
}

#
# Determine extension used for executables
#
get_system_exe_extension() {
	case $1 in
	arm-riscos)
		_exeext=",ff8"
		;;
	dreamcast | ds | gamecube | n64 | ps2 | psp | wii)
		_exeext=".elf"
		;;
	gph-linux)
		_exeext=".gph"
		;;
	mingw* | *os2-emx | wince)
		_exeext=".exe"
		;;
	*)
		_exeext=""
		;;
	esac
}

#
# Generic options functions
#

# Show the configure help line for an option
option_help() {
	if test "${3}" != "" ; then
		tmpopt_prefix="${3}"
	else
		tmpopt_prefix="--"
	fi
	tmpopt=`echo $1 | sed 's/_/-/g'`
	option=`echo "${tmpopt_prefix}${tmpopt}                       " | sed "s/\(.\{23\}\).*/\1/"`
	echo "  ${option}  ${2}"
}

# Show an error about an unknown option
option_error() {
	echo "error: unrecognized option: $ac_option
Try \`$0 --help' for more information." >&2
	exit 1
}

#
# Greet user
#
echo "Running Tools configure..."
echo "Configure run on" `date` > $TMPLOG

#
# Check any parameters we received
#
# TODO:
# * Change --disable-mad / --enable-mad to the way it's done in autoconf:
#  That is, --without-mad / --with-mad=/prefix/to/mad. Useful for people
#  who have Mad/Vorbis/ALSA installed in a non-standard locations.
#

for parm in "$@" ; do
	if test "$parm" = "--help" || test "$parm" = "-help" || test "$parm" = "-h" ; then
		for engine in $_engines; do
			if test `get_engine_sub $engine` = no ; then
				engines_help="$engines_help`show_engine_help $engine`
"
			fi
		done
		cat << EOF

Usage: $0 [OPTIONS]...

Configuration:
  -h, --help              display this help and exit
  --backend=BACKEND       backend to build (sdl, null) [sdl]

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, \`make install' will install all the files in
\`/usr/local/bin', \`/usr/local/lib' etc.  You can specify
an installation prefix other than \`/usr/local' using \`--prefix',
for instance \`--prefix=\$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data
                          [DATAROOTDIR/residualvm]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/residualvm]

Special configuration feature:
  --host=HOST             cross-compile to target HOST (arm-linux, ...)

Optional Features:
  --disable-debug          disable building with debugging symbols
  --enable-Werror          treat warnings as errors
  --enable-release         enable building in release mode (this activates
                           optimizations)
  --enable-release-mode    enable building in release mode (without optimizations)
  --enable-optimizations   enable optimizations
  --enable-profiling       enable profiling
  --enable-verbose-build   enable regular echoing of commands during build
                           process

Optional Libraries:
  --with-ogg-prefix=DIR    Prefix where libogg is installed (optional)
  --with-vorbis-prefix=DIR Prefix where libvorbis is installed (optional)
  --disable-vorbis         disable Ogg Vorbis support [autodetect]

  --with-tremor-prefix=DIR Prefix where tremor is installed (optional)
  --disable-tremor         disable tremor support [autodetect]

  --with-mad-prefix=DIR    Prefix where libmad is installed (optional)
  --disable-mad            disable libmad (MP3) support [autodetect]

  --with-flac-prefix=DIR   Prefix where libFLAC is installed (optional)
  --disable-flac           disable FLAC support [autodetect]

  --with-zlib-prefix=DIR   Prefix where zlib is installed (optional)
  --disable-zlib           disable zlib (compression) support [autodetect]


Some influential environment variables:
  LDFLAGS        linker flags, e.g. -L<lib dir> if you have libraries in a
                 nonstandard directory <lib dir>
  CXX            C++ compiler command
  CXXFLAGS       C++ compiler flags
  CPPFLAGS       C++ preprocessor flags, e.g. -I<include dir> if you have
                 headers in a nonstandard directory <include dir>
  ASFLAGS        assembler flags
  WINDRESFLAGS   Windows resource compiler flags

EOF
		exit 0
	fi
done # for parm in ...

for ac_option in $@; do
	case "$ac_option" in
	--enable-vorbis)          _vorbis=yes     ;;
	--disable-vorbis)         _vorbis=no      ;;
	--enable-tremor)          _tremor=yes     ;;
	--disable-tremor)         _tremor=no      ;;
	--enable-flac)            _flac=yes       ;;
	--disable-flac)           _flac=no        ;;
	--enable-mad)             _mad=yes        ;;
	--disable-mad)            _mad=no         ;;
	--enable-verbose-build)   _verbose_build=yes ;;
	--with-ogg-prefix=*)
		arg=`echo $ac_option | cut -d '=' -f 2`
		OGG_CFLAGS="-I$arg/include"
		OGG_LIBS="-L$arg/lib"
		;;
	--with-vorbis-prefix=*)
		arg=`echo $ac_option | cut -d '=' -f 2`
		VORBIS_CFLAGS="-I$arg/include"
		VORBIS_LIBS="-L$arg/lib"
		;;
	--with-tremor-prefix=*)
		arg=`echo $ac_option | cut -d '=' -f 2`
		TREMOR_CFLAGS="-I$arg/include"
		TREMOR_LIBS="-L$arg/lib"
		;;
	--with-flac-prefix=*)
		arg=`echo $ac_option | cut -d '=' -f 2`
		FLAC_CFLAGS="-I$arg/include"
		FLAC_LIBS="-L$arg/lib"
		;;
	--with-mad-prefix=*)
		arg=`echo $ac_option | cut -d '=' -f 2`
		MAD_CFLAGS="-I$arg/include"
		MAD_LIBS="-L$arg/lib"
		;;
	--with-zlib-prefix=*)
		arg=`echo $ac_option | cut -d '=' -f 2`
		ZLIB_CFLAGS="-I$arg/include"
		ZLIB_LIBS="-L$arg/lib"
		;;
	--enable-debug)
		_debug_build=yes
		;;
	--disable-debug)
		_debug_build=no
		;;
	--enable-Werror)
		CXXFLAGS="$CXXFLAGS -Werror"
		;;
	--enable-release-mode)
		_release_build=yes
		;;
	--disable-release-mode)
		_release_build=no
		;;
	--enable-release)
		_release_build=yes
		_optimizations=yes
		;;
	--disable-release)
		_release_build=no
		_optimizations=no
		;;
	--enable-optimizations)
		_optimizations=yes
		;;
	--disable-optimizations)
		_optimizations=no
		;;
	--enable-profiling)
		_enable_prof=yes
		;;
	--with-staticlib-prefix=*)
		_staticlibpath=`echo $ac_option | cut -d '=' -f 2`
		;;
	--host=*)
		_host=`echo $ac_option | cut -d '=' -f 2`
		;;
	--prefix=*)
		prefix=`echo $ac_option | cut -d '=' -f 2`
		;;
	--exec-prefix=*)
		exec_prefix=`echo $ac_option | cut -d '=' -f 2`
		;;
	--bindir=*)
		bindir=`echo $ac_option | cut -d '=' -f 2`
		;;
	--libdir=*)
		libdir=`echo $ac_option | cut -d '=' -f 2`
		;;
	--datarootdir=*)
		datarootdir=`echo $ac_option | cut -d '=' -f 2`
		;;
	--datadir=*)
		datadir=`echo $ac_option | cut -d '=' -f 2`
		;;
	--mandir=*)
		mandir=`echo $ac_option | cut -d '=' -f 2`
		;;
	--docdir=*)
		docdir=`echo $ac_option | cut -d '=' -f 2`
		;;
	*)
		option_error
		;;
	esac;
done;

guessed_host=`$_srcdir/config.guess`
get_system_exe_extension $guessed_host
NATIVEEXEEXT=$_exeext

case $_host in
android | android-v7a)
	_host_os=android
	_host_cpu=arm
	_host_alias=arm-linux-androideabi
	;;
arm-riscos)
	_host_os=riscos
	_host_cpu=arm
	;;
bada)
	_host_os=bada
	if test "$_debug_build" = yes; then
		_host_cpu=i686
		_host_alias=i686-mingw32
	else
		_host_cpu=arm
		_host_alias=arm-samsung-nucleuseabi
	fi
	;;
caanoo)
	_host_os=gph-linux
	_host_cpu=arm
	_host_alias=arm-none-linux-gnueabi
	;;
dingux)
	_host_os=linux
	_host_cpu=mipsel
	_host_alias=mipsel-linux
	;;
dreamcast)
	_host_os=dreamcast
	_host_cpu=sh
	_host_alias=sh-elf
	CXXFLAGS="$CXXFLAGS -ml -m4-single-only"
	LDFLAGS="$LDFLAGS -ml -m4-single-only"
	;;
ds)
	_host_os=ds
	_host_cpu=arm
	_host_alias=arm-eabi
	;;
gamecube)
	_host_os=gamecube
	_host_cpu=ppc
	_host_alias=powerpc-gekko
	;;
gp2x)
	_host_os=gph-linux
	_host_cpu=arm
	_host_alias=arm-open2x-linux
	;;
gp2xwiz)
	_host_os=gph-linux
	_host_cpu=arm
	_host_alias=arm-open2x-linux
	;;
i586-mingw32msvc)
	_host_os=mingw32msvc
	_host_cpu=i586
	;;
iphone)
	_host_os=iphone
	_host_cpu=arm
	_host_alias=arm-apple-darwin9
	;;
linupy)
	_host_os=linux
	_host_cpu=arm
	;;
maemo)
	_host_os=maemo
	_host_cpu=arm
	_host_alias=arm-linux

	# The prefix is always the same on Maemo so we hardcode the default
	# here. It is still possible to define a custom prefix which is
	# needed when packaging the app with a user-specific app ID.
	test "x$prefix" = xNONE && prefix=/opt/scummvm
	# Maemo apps are installed into app-specific directories. The
	# default directory structure of ScummVM makes no sense here so we
	# hardcode Maemo specific directories here.
	datarootdir='${prefix}/share'
	datadir=/opt/scummvm/share
	docdir='${datarootdir}/doc/scummvm'
	;;
motoezx)
	_host_os=linux
	_host_cpu=arm
	_host_alias=arm-linux-gnu
	;;
motomagx)
	_host_os=linux
	_host_cpu=arm
	_host_alias=arm-linux-gnueabi
	;;
n64)
	_host_os=n64
	_host_cpu=mips
	_host_alias=mips64
	;;
neuros)
	_host_os=linux
	_host_cpu=arm
	;;
openpandora)
	_host_os=linux
	_host_cpu=arm
	_host_alias=arm-angstrom-linux-gnueabi
	;;
ppc-amigaos)
	_host_os=amigaos
	_host_cpu=ppc
	;;
ps2)
	_host_os=ps2
	_host_cpu=mips64r5900el
	_host_alias=ee
	;;
ps3)
	_host_os=ps3
	_host_cpu=ppc
	_host_alias=powerpc64-ps3-elf

	# The prefix is always the same on PS3 so we hardcode the default
	# here. It is still possible to define a custom prefix which is
	# needed when packaging the app with a user-specific app ID.
	test "x$prefix" = xNONE && prefix=/dev_hdd0/game/SCUM12000/USRDIR
	# PS3 apps are installed into app-specific directories. The
	# default directory structure of ScummVM makes no sense here so we
	# hardcode PS3 specific directories here.
	datarootdir='${prefix}/data'
	datadir='${datarootdir}'
	docdir='${prefix}/doc'
	;;
psp)
	_host_os=psp
	_host_cpu=mipsallegrexel
	_host_alias=psp
	;;
samsungtv)
	_host_os=linux
	_host_cpu=arm
	_host_alias=arm-linux-gnueabi
	;;
webos)
	_host_os=webos
	_host_cpu=arm
	_host_alias=arm-none-linux-gnueabi
	# The prefix is always the same on WebOS so we hardcode the default
	# here. It is still possible to define a custom prefix which is
	# needed when packaging the app with a user-specific app ID.
	test "x$prefix" = xNONE && prefix=/media/cryptofs/apps/usr/palm/applications/org.residualvm.residualvm
	# WebOS apps are installed into app-specific directories. The
	# default directory structure of ScummVM makes no sense here so we
	# hardcode WebOS specific directories here.
	datarootdir='${prefix}/data'
	datadir='${datarootdir}'
	docdir='${prefix}/doc'
	;;
wii)
	_host_os=wii
	_host_cpu=ppc
	_host_alias=powerpc-gekko
	;;
wince)
	_host_os=wince
	_host_cpu=arm
	_host_alias=arm-mingw32ce
	;;
*)
	if test -n "$_host"; then
		guessed_host=`$_srcdir/config.sub $_host`
	fi
	_host_cpu=`echo $guessed_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\1/'`
	_host_vendor=`echo $guessed_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\2/'`
	_host_os=`echo $guessed_host | sed 's/^\([^-]*\)-\([^-]*\)-\(.*\)$/\3/'`
	;;
esac

if test -z "$_host_alias"; then
	_host_alias="$_host_cpu-$_host_os"
else
	# if _host_alias was set, default to the standard GNU tools
	_ranlib=$_host_alias-ranlib
	_strip=$_host_alias-strip
	_ar="$_host_alias-ar cru"
	_as="$_host_alias-as"
	_windres=$_host_alias-windres
fi

#
# Determine extra build flags for debug and/or release builds
#

case $_host in
caanoo | gp2x | gp2xwiz | openpandora | ps2)
	if test "$_debug_build" = auto; then
		# If you want to debug one of these platforms, use '--disable-release --enable-debug'
		_debug_build=no
	fi

	if test "$_release_build" = auto; then
		# Enable release build by default.
		_release_build=yes
	fi

	if test "$_optimizations" = auto; then
		# Enable optimizations by default.
		_optimizations=yes
	fi
	;;
esac

if test "$_debug_build" != no; then
	# debug mode not explicitly disabled -> compile with -g
	CXXFLAGS="$CXXFLAGS -g"
fi

if test "$_release_build" = yes; then
	# Add a define, which indicates we are doing
	# an build for a release version.
	DEFINES="$DEFINES -DRELEASE_BUILD"
fi


#
# Determine extension used for executables
#
get_system_exe_extension $_host_os
HOSTEXEPRE=
HOSTEXEEXT=$_exeext

#
# Determine separator used for $PATH
#
case $_host_os in
os2-emx*)
	SEPARATOR=";"
	;;
*)
	SEPARATOR=":"
	;;
esac

#
# Platform specific sanity checks
#
case $_host_os in
android)
	if test -z "$ANDROID_SDK"; then
		echo "Please set ANDROID_SDK in your environment. export ANDROID_SDK=<path to Android SDK>"
		exit 1
	fi
	if test -z "$ANDROID_NDK"; then
		echo "Please set ANDROID_NDK in your environment. export ANDROID_NDK=<path to Android NDK>"
		exit 1
	fi
	;;
bada)
	if test -z "$BADA_SDK"; then
		echo "Please set BADA_SDK in your environment. export BADA_SDK=<path to Bada SDK>"
		exit 1
	fi
	;;
ds | gamecube | wii)
	if test -z "$DEVKITPRO"; then
		echo "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to devkitPRO>"
		exit 1
	fi
	;;
n64)
	if test -z "$N64SDK"; then
		echo "Please set N64SDK in your environment. export N64SDK=<path to n64 sdk>"
		exit 1
	fi
	;;
ps2)
	if test -z "$PS2SDK"; then
		echo "Please set PS2SDK in your environment. export PS2SDK=<path to ps2 sdk>"
		exit 1
	fi
	;;
ps3)
	if test -z "$PS3DEV"; then
		echo "Please set PS3DEV in your environment. export PS3DEV=<path to ps3 toolchain>"
		exit 1
	fi
	;;
psp)
	if test -z "$PSPDEV"; then
		PSPDEV=`psp-config --pspdev-path`
	fi
	# TODO: Should we also insist on a valid PSPDEV value?
	if test -z "$PSPSDK"; then
		PSPSDK=`psp-config --pspsdk-path`
	fi
	if test -z "$PSPSDK"; then
		echo "Please set PSPSDK in your environment. export PSPSDK=<path to psp sdk>"
		exit 1
	fi
	;;
webos)
	if test -z "$WEBOS_SDK"; then
		echo "Please set WEBOS_SDK in your environment. export WEBOS_SDK=<path to WebOS SDK>"
		exit 1
	fi
	if test -z "$WEBOS_PDK"; then
		echo "Please set WEBOS_PDK in your environment. export WEBOS_PDK=<path to WebOS PDK>"
		exit 1
	fi
	;;
*)
	;;
esac

#
# Determine the C++ compiler
#
echo_n "Looking for C++ compiler... "

# Check whether the given command is a working C++ compiler
test_compiler() {
	cat > tmp_cxx_compiler.cpp << EOF
	class Foo { int a; };
	int main(int argc, char **argv) {
		Foo *a = new Foo(); delete a; return 0;
	}
EOF

	echo "testing compiler: $1" >> "$TMPLOG"

	if test -n "$_host"; then
		# In cross-compiling mode, we cannot run the result
		eval "$1 $CXXFLAGS $LDFLAGS -o $TMPO.o -c tmp_cxx_compiler.cpp" 2> /dev/null && cc_check_clean tmp_cxx_compiler.cpp
	else
		eval "$1 $CXXFLAGS $LDFLAGS -o $TMPO$HOSTEXEEXT tmp_cxx_compiler.cpp" 2> /dev/null && eval "$TMPO$HOSTEXEEXT 2> /dev/null" && cc_check_clean tmp_cxx_compiler.cpp
	fi
}

# Prepare a list of candidates for the C++ compiler
if test -n "$CXX" && test_compiler "$CXX"; then
	# Use the compiler specified in CXX
	echo $CXX
else
	if test -n "$_host"; then
		compilers="$_host_alias-g++ $_host_alias-c++ $_host-g++ $_host-c++"
	else
		compilers="g++ c++"
	fi

	# Iterate over all candidates, pick the first working one
	CXX=
	for compiler in $compilers; do
		if test_compiler $compiler; then
			echo "success testing compiler: $compiler" >> "$TMPLOG"
			CXX=$compiler
			echo $CXX
			break
		else
			echo "failure testing compiler: $compiler" >> "$TMPLOG"
		fi
	done
fi

if test -z "$CXX"; then
	echo "none found!"
	exit 1
fi

# By default, use the C++ compiler as linker
LD=$CXX

#
# Determine the compiler version
#
echocheck "compiler version"

# We first check whether we have an Intel compiler here, since the Intel compiler
# can also fake itself as an gcc (to ease compatibility with common Linux etc.
# programs).
have_icc=no
cc_check_define __INTEL_COMPILER && have_icc=yes

if test "$have_icc" = yes; then
	add_line_to_config_mk 'HAVE_ICC = 1'

	# Make ICC error our on unknown command line options instead of printing
	# a warning. This is for example required to make the -Wglobal-destructors
	# detection work correctly.
	CXXFLAGS="$CXXFLAGS -diag-error 10006,10148"
fi

have_gcc=no
cc_check_define __GNUC__ && have_gcc=yes

if test "$have_gcc" = yes; then
	add_line_to_config_mk 'HAVE_GCC = 1'
	_cxx_major=`gcc_get_define __GNUC__`
	_cxx_minor=`gcc_get_define __GNUC_MINOR__`
	cxx_version="`( $CXX -dumpversion ) 2>&1`"

	if test -n "`gcc_get_define __clang__`"; then
		add_line_to_config_mk 'HAVE_CLANG = 1'
	fi

	if test "$_cxx_major" -eq 2 && test "$_cxx_minor" -ge 95 || \
	   test "$_cxx_major" -gt 2 ; then
		cxx_version="$cxx_version, ok"
		cxx_verc_fail=no
	else
		cxx_version="$cxx_version, bad"
		cxx_verc_fail=yes
	fi
elif test "$have_icc" = yes; then
	cxx_version="`( $CXX -dumpversion ) 2>/dev/null`"
	_cxx_major="`echo "${cxx_version}" | sed -ne 's/\([0-9][0-9]*\)\..*/\1/gp'`"
	_cxx_minor="`echo "${cxx_version}" | sed -ne 's/[0-9][0-9]*\.\([0-9][0-9]*\)/\1/gp'`"
	cxx_version="ICC $cxx_version, ok"
else
	# TODO: Big scary warning about unsupported compilers
	cxx_version=`( $CXX -version ) 2>&1`
	if test "$?" -eq 0; then
		cxx_version="`echo "${cxx_version}" | sed -ne 's/^.*[^0-9]\([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\).*$/\1/gp'`"
		if test -z "${cxx_version}"; then
			cxx_version="not found"
			cxx_verc_fail=yes
		fi
		echo non-gcc compiler version ${cxx_version}
	else
		cxx_version="not found"
		cxx_verc_fail=yes
		echo found non-gcc compiler version ${cxx_version}
	fi

	case $_host_os in
		irix*)
			case $cxx_version in
				7.4.4*)
					# We just assume this is SGI MIPSpro
					_cxx_major=7
					_cxx_minor=4
					cxx_verc_fail=no
					add_line_to_config_mk 'CXX_UPDATE_DEP_FLAG = -MDupdate "$(*D)/$(DEPDIR)/$(*F).d"'
					add_line_to_config_mk '-include Makedepend'
					;;
				*)
					cxx_version="$cxx_version, bad"
					cxx_verc_fail=yes
					;;
			esac
			;;
		*)
			cxx_version="$cxx_version, bad"
			cxx_verc_fail=yes
			;;
	esac
fi

echo "$cxx_version"

#
# Bail out now if no useable compiler was found.
#
if test "$cxx_verc_fail" = yes ; then
	echo
	echo "The version of your compiler is not supported at this time"
	echo "Please ensure you are using GCC >= 2.95"
	exit 1
fi

#
# Setup compiler specific CXXFLAGS now that we know the compiler version.
# Foremost, this means enabling various warnings.
# In addition, we set CXX_UPDATE_DEP_FLAG for GCC >= 3.0 and for ICC.
#
if test "$have_gcc" = yes ; then
	if test "$_cxx_major" -ge "3" ; then
		case $_host_os in
		# newlib-based system include files suppress non-C89 function
		# declarations under __STRICT_ANSI__
		amigaos* | android | bada | dreamcast | ds | gamecube | mingw* | n64 | psp | ps2 | ps3 | wii | wince )
			;;
		*)
			CXXFLAGS="$CXXFLAGS -ansi"
			;;
		esac
		CXXFLAGS="$CXXFLAGS -W -Wno-unused-parameter"
		add_line_to_config_mk 'HAVE_GCC3 = 1'
		add_line_to_config_mk 'CXX_UPDATE_DEP_FLAG = -MMD -MF "$(*D)/$(DEPDIR)/$(*F).d" -MQ "$@" -MP'
	fi;

	if test "$_cxx_major" -eq 4 && test "$_cxx_minor" -ge 3 || \
	   test "$_cxx_major" -gt 4 ; then
		CXXFLAGS="$CXXFLAGS -Wno-empty-body"
	else
		CXXFLAGS="$CXXFLAGS -Wconversion"
	fi;
elif test "$have_icc" = yes ; then
	add_line_to_config_mk 'CXX_UPDATE_DEP_FLAG = -MMD -MF "$(*D)/$(DEPDIR)/$(*F).d" -MQ "$@" -MP'
fi;

# By default, we add -pedantic to the CXXFLAGS to catch some potentially
# non-portable constructs, like use of GNU extensions.
# However, some platforms use GNU extensions in system header files, so
# for these we must not use -pedantic.
case $_host_os in
android | gamecube | psp | wii | webos)
	;;
*)
	# ICC does not support pedantic, while GCC and clang do.
	if test "$have_icc" = no ; then
		CXXFLAGS="$CXXFLAGS -pedantic"
	fi
	;;
esac

# If possible, we want to use -Wglobal-constructors
# However, not all compilers support that, so check whether the active one does.
echocheck "whether -Wglobal-constructors work"
cat > $TMPC << EOF
int main() { return 0; }
EOF
cc_check -Wglobal-constructors && _global_constructors=yes

if test "$_global_constructors" = yes; then
	CXXFLAGS="$CXXFLAGS -Wglobal-constructors"
fi
echo $_global_constructors

#
# Check for endianness
#
echo_n "Checking endianness... "
cat > tmp_endianness_check.cpp << EOF
unsigned short ascii_mm[] = { 0x4249, 0x4765, 0x6E44, 0x6961, 0x6E53, 0x7953, 0 };
unsigned short ascii_ii[] = { 0x694C, 0x5454, 0x656C, 0x6E45, 0x6944, 0x6E61, 0 };
void _ascii() { char* s = (char*) ascii_mm; s = (char*) ascii_ii; }
unsigned short ebcdic_ii[] = { 0x89D3, 0xE3E3, 0x8593, 0x95C5, 0x89C4, 0x9581, 0 };
unsigned short ebcdic_mm[] = { 0xC2C9, 0xC785, 0x95C4, 0x8981, 0x95E2, 0xA8E2, 0 };
void _ebcdic() { char* s = (char*) ebcdic_mm; s = (char*) ebcdic_ii; }
int main() { _ascii (); _ebcdic (); return 0; }
EOF
$CXX $CXXFLAGS -c -o $TMPO.o tmp_endianness_check.cpp
if strings $TMPO.o | grep BIGenDianSyS >/dev/null; then
	_endian=big
elif strings $TMPO.o | grep LiTTleEnDian >/dev/null; then
	_endian=little
fi
echo $_endian;
cc_check_clean tmp_endianness_check.cpp

case $_endian in
	big)
		add_line_to_config_h '#undef SCUMM_LITTLE_ENDIAN'
		add_line_to_config_h '#define SCUMM_BIG_ENDIAN'
		;;
	little)
		add_line_to_config_h '#define SCUMM_LITTLE_ENDIAN'
		add_line_to_config_h '#undef SCUMM_BIG_ENDIAN'
		;;
	*)
		exit 1
		;;
esac

#
# Determine a data type with the given length
#
find_type_with_size() {
	for datatype in int short char long "long long" unknown; do
		cat > tmp_find_type_with_size.cpp << EOF
typedef $datatype ac__type_sizeof_;
int main() {
	static int test_array [1 - 2 * !(((long int) (sizeof (ac__type_sizeof_))) == $1)];
	test_array [0] = 0;
	return 0;
}
EOF
		if $CXX $CXXFLAGS -c -o $TMPO.o tmp_find_type_with_size.cpp 2>/dev/null ; then
			break
		else
			if test "$datatype" = "unknown"; then
				echo "couldn't find data type with $1 bytes"
				exit 1
			fi
			continue
		fi
	done
	cc_check_clean tmp_find_type_with_size.cpp
	echo $datatype
}

#
# Check whether the system is 32-bit
#
pointer_is_32bit() {
	cat > tmp_pointer_is_32bit.cpp << EOF
int main() {
	static int test_array[1 - 2 * !(sizeof(void *) == 4)];
	test_array[0] = 0;
	return 0;
}
EOF
	$CXX $CXXFLAGS -c -o $TMPO.o tmp_pointer_is_32bit.cpp 2>/dev/null
	status=$?
	cc_check_clean tmp_pointer_is_32bit.cpp
	return $status
}

echo_n "Checking 64-bitness... "
pointer_is_32bit
if test $? -eq 0; then
	type_ptr=int32
	echo "no"
	add_line_to_config_h "/* #define SCUMM_64BITS */"
else
	type_ptr=int64
	echo "yes"
	add_line_to_config_h "#define SCUMM_64BITS"
fi

#
# Determine data type sizes
#
echo_n "Type with 1 byte... "
type_1_byte=`find_type_with_size 1`
TMPR="$?"
echo "$type_1_byte"
test $TMPR -eq 0 || exit 1	# check exit code of subshell

echo_n "Type with 2 bytes... "
type_2_byte=`find_type_with_size 2`
TMPR="$?"
echo "$type_2_byte"
test $TMPR -eq 0 || exit 1	# check exit code of subshell

echo_n "Type with 4 bytes... "
type_4_byte=`find_type_with_size 4`
TMPR="$?"
echo "$type_4_byte"
test $TMPR -eq 0 || exit 1	# check exit code of subshell

echo_n "Type with 8 bytes... "
type_8_byte=`find_type_with_size 8`
TMPR="$?"
echo "$type_8_byte"
if test $TMPR -eq 0; then
	_def_64bit_type_signed="typedef signed $type_8_byte int64;"
	_def_64bit_type_unsigned="typedef unsigned $type_8_byte uint64;"
fi
# force cleanup after check for 8 bytes type
cc_check_clean tmp_find_type_with_size.cpp

#
# Check whether memory alignment is required
#
# For some CPU types, unaligned memory access is either not supported at
# all (and so leads to a crash), requires a super-slow emulation via an
# exception handler, or just results in incorrect results.
# On the other hand, accessing data in a manner that works regardless of
# alignment can be a lot slower than regular access, so we don't want
# to use it if we don't have to.
#
# So we do the following: For CPU families where we know whether unaligned
# access is safe & fast, we enable / disable unaligned access accordingly.
# Otherwise, we just disable memory alignment.
#
# NOTE: In the past, for non-cross compiled builds, we would also run some code
# which would try to test whether unaligned access worked or not. But this test
# could not reliably determine whether unaligned access really worked in all
# situations (and across different implementations of the target CPU arch), nor
# whether it was fast (as opposed to slowly emulated by fault handlers). Hence,
# we do not use this approach anymore.
#
# NOTE: The only kinds of unaligned access we allow are for 2 byte and 4
# byte loads / stores. No promises are made for bigger sizes, such as 8
# or 16 byte loads, for which architectures may behave differently than
# for the smaller sizes.
echo_n "Alignment required... "
case $_host_cpu in
	i[3-6]86 | x86_64 | ppc*)
		# Unaligned access should work
		_need_memalign=no
		;;
	alpha* | arm* | bfin* | hp* | mips* | sh* | sparc* | ia64 | nv1*)
		# Unaligned access is not supported or extremely slow.
		_need_memalign=yes
		;;
	*)
		# Status of unaligned access is unknown, so assume the worst.
		_need_memalign=yes
		;;
esac
echo "$_need_memalign"

define_in_config_h_if_yes $_need_memalign 'SCUMM_NEED_ALIGNMENT'

#
# Check the CPU architecture
#
echo_n "Checking host CPU architecture... "
case $_host_cpu in
	arm*)
		echo "ARM"
		define_in_config_if_yes yes 'USE_ARM_SCALER_ASM'
		define_in_config_if_yes yes 'USE_ARM_SOUND_ASM'
		define_in_config_if_yes yes 'USE_ARM_SMUSH_ASM'
		define_in_config_if_yes yes 'USE_ARM_GFX_ASM'
		define_in_config_if_yes yes 'USE_ARM_COSTUME_ASM'

		DEFINES="$DEFINES -DARM_TARGET"
		;;
	i[3-6]86)
		echo "x86"
		_have_x86=yes
		define_in_config_h_if_yes $_have_x86 'HAVE_X86'
		;;
	mips*)
		echo "MIPS"
		DEFINES="$DEFINES -DMIPS_TARGET"
		;;
	ppc*)
		echo "PowerPC"
		DEFINES="$DEFINES -DPPC_TARGET"
		;;
	x86_64)
		echo "x86_64"
		;;
	*)
		echo "unknown ($_host_cpu)"
		;;
esac


#
# Determine build settings
#
echo_n "Checking hosttype... "
echo $_host_os
case $_host_os in
	amigaos*)
		LDFLAGS="$LDFLAGS -use-dynld"
		LDFLAGS="$LDFLAGS -L/sdk/local/newlib/lib"
		# We have to use 'long' for our 4 byte typedef because AmigaOS already typedefs (u)int32
		# as (unsigned) long, and consequently we'd get a compiler error otherwise.
		type_4_byte='long'
		add_line_to_config_mk 'AMIGAOS = 1'
		;;
	android)
		case $_host in
			android)
				CXXFLAGS="$CXXFLAGS -march=armv5te"
				CXXFLAGS="$CXXFLAGS -mtune=xscale"
				CXXFLAGS="$CXXFLAGS -msoft-float"
				;;
			android-v7a)
				CXXFLAGS="$CXXFLAGS -march=armv7-a"
				CXXFLAGS="$CXXFLAGS -mfloat-abi=softfp"
				CXXFLAGS="$CXXFLAGS -mfpu=vfp"
				LDFLAGS="$LDFLAGS -Wl,--fix-cortex-a8"
				;;
		esac
		CXXFLAGS="$CXXFLAGS --sysroot=$ANDROID_NDK/platforms/android-4/arch-arm"
		CXXFLAGS="$CXXFLAGS -fpic"
		CXXFLAGS="$CXXFLAGS -ffunction-sections"
		CXXFLAGS="$CXXFLAGS -funwind-tables"
		if test "$_debug_build" = yes; then
			CXXFLAGS="$CXXFLAGS -fno-omit-frame-pointer"
			CXXFLAGS="$CXXFLAGS -fno-strict-aliasing"
		else
			CXXFLAGS="$CXXFLAGS -fomit-frame-pointer"
			CXXFLAGS="$CXXFLAGS -fstrict-aliasing"
		fi
		CXXFLAGS="$CXXFLAGS -finline-limit=300"
		_optimization_level=-Os
		CXXFLAGS="$CXXFLAGS -mthumb-interwork"
		# FIXME: Why is the following in CXXFLAGS and not in DEFINES? Change or document this.
		CXXFLAGS="$CXXFLAGS -D__ARM_ARCH_5__"
		CXXFLAGS="$CXXFLAGS -D__ARM_ARCH_5T__"
		CXXFLAGS="$CXXFLAGS -D__ARM_ARCH_5E__"
		CXXFLAGS="$CXXFLAGS -D__ARM_ARCH_5TE__"
		# supress 'mangling of 'va_list' has changed in GCC 4.4'
		CXXFLAGS="$CXXFLAGS -Wno-psabi"
		LDFLAGS="$LDFLAGS --sysroot=$ANDROID_NDK/platforms/android-4/arch-arm"
		LDFLAGS="$LDFLAGS -mthumb-interwork"
		add_line_to_config_mk "ANDROID_SDK = $ANDROID_SDK"
		_seq_midi=no
		;;
	bada)
		BADA_SDK_ROOT="`cygpath -m ${BADA_SDK}`"
		add_line_to_config_mk "BADA_SDK = $BADA_SDK"
		add_line_to_config_mk "BADA_SDK_ROOT = $BADA_SDK_ROOT"

		# assume dependencies have been installed in cygwin's /usr/local
		CYGWIN_USR_LOCAL="`cygpath -m /usr/local`"
		LDFLAGS="$LDFLAGS -L${CYGWIN_USR_LOCAL}/lib"
		CXXFLAGS="$CXXFLAGS -I${CYGWIN_USR_LOCAL}/include"
		;;
	beos*)
		DEFINES="$DEFINES -DSYSTEM_NOT_SUPPORTING_D_TYPE"
		# Needs -lbind -lsocket for the timidity MIDI driver
		LDFLAGS="-L/boot/home/config/lib"
		CFLAGS="-I/boot/home/config/include"
		CXXFLAGS="$CXXFLAGS -fhuge-objects"
		LIBS="$LIBS -lbind -lsocket"
		_seq_midi=no
		;;
	cygwin*)
		echo ERROR: Cygwin building is not supported by ScummVM anymore. Consider using MinGW.
		exit 1
		;;
	darwin*)
		DEFINES="$DEFINES -DMACOSX"
		LIBS="$LIBS -framework AudioUnit -framework AudioToolbox -framework Carbon -framework CoreMIDI"
		add_line_to_config_mk 'MACOSX = 1'

		# Now we may have MacPorts or Fink installed
		# Which put libraries and headers in non-standard places
		# Checking them here

		# MacPorts
		# There is no way to get the prefix, so implementing a hack here
		macport_version=`port version 2>/dev/null`
		if test "$?" -eq 0; then
			macport_version="`echo "${macport_version}" | sed -ne 's/Version: \([0-9]\.[0-9]\.[0-9]\)/\1/gp'`"
			echo_n "You seem to be running MacPorts version ${macport_version}..."

			macport_prefix=`which port`
			# strip off /bin/port from /opt/local/bin/port
			macport_prefix=`dirname ${macport_prefix}`
			macport_prefix=`dirname ${macport_prefix}`

			echo "adding ${macport_prefix} to paths"

			LDFLAGS="-L${macport_prefix}/lib $LDFLAGS"
			CXXFLAGS="-I${macport_prefix}/include $CXXFLAGS"
		fi
		;;
	dreamcast)
		DEFINES="$DEFINES -D__DC__"
		DEFINES="$DEFINES -DNONSTANDARD_PORT"
		;;
	ds)
		DEFINES="$DEFINES -D__DS__"
		DEFINES="$DEFINES -DNDS"
		DEFINES="$DEFINES -DARM9"
		DEFINES="$DEFINES -DARM"
		DEFINES="$DEFINES -DNONSTANDARD_PORT"
		CXXFLAGS="$CXXFLAGS -isystem $DEVKITPRO/libnds/include"
		CXXFLAGS="$CXXFLAGS -isystem $DEVKITPRO/devkitARM/arm-eabi/include"
		CXXFLAGS="$CXXFLAGS -mcpu=arm9tdmi"
		CXXFLAGS="$CXXFLAGS -mtune=arm9tdmi"
		CXXFLAGS="$CXXFLAGS -fomit-frame-pointer"
		CXXFLAGS="$CXXFLAGS -mthumb-interwork"
		CXXFLAGS="$CXXFLAGS -ffunction-sections"
		CXXFLAGS="$CXXFLAGS -fdata-sections"
		CXXFLAGS="$CXXFLAGS -fno-strict-aliasing"
		CXXFLAGS="$CXXFLAGS -fuse-cxa-atexit"
		LDFLAGS="$LDFLAGS -specs=ds_arm9.specs"
		LDFLAGS="$LDFLAGS -mthumb-interwork"
		LDFLAGS="$LDFLAGS -mno-fpu"
		LDFLAGS="$LDFLAGS -Wl,-Map,map.txt"
		if test "$_dynamic_modules" = no ; then
			LDFLAGS="$LDFLAGS -Wl,--gc-sections"
		else
			LDFLAGS="$LDFLAGS -Wl,--no-gc-sections"
			# TODO automate this required 2 step linking phase
			# LDFLAGS="$LDFLAGS -Wl,--retain-symbols-file,ds.syms"
		fi
		LDFLAGS="$LDFLAGS -L$DEVKITPRO/libnds/lib"
		LIBS="$LIBS -lnds9"
		;;
	freebsd*)
		LDFLAGS="$LDFLAGS -L/usr/local/lib"
		CXXFLAGS="$CXXFLAGS -I/usr/local/include"
		;;
	gamecube)
		_optimization_level=-Os
		CXXFLAGS="$CXXFLAGS -mogc"
		CXXFLAGS="$CXXFLAGS -mcpu=750"
		CXXFLAGS="$CXXFLAGS -meabi"
		CXXFLAGS="$CXXFLAGS -mhard-float"
		CXXFLAGS="$CXXFLAGS -ffunction-sections"
		CXXFLAGS="$CXXFLAGS -fdata-sections"
		CXXFLAGS="$CXXFLAGS -fmodulo-sched"
		CXXFLAGS="$CXXFLAGS -fuse-cxa-atexit"
		CXXFLAGS="$CXXFLAGS -I$DEVKITPRO/libogc/include"
		# libogc is required to link the cc tests (includes _start())
		LDFLAGS="$LDFLAGS -mogc"
		LDFLAGS="$LDFLAGS -mcpu=750"
		LDFLAGS="$LDFLAGS -L$DEVKITPRO/libogc/lib/cube"
		LDFLAGS="$LDFLAGS -logc"
		if test "$_dynamic_modules" = "yes" ; then
			# retarded toolchain patch forces --gc-sections, overwrite it
			LDFLAGS="$LDFLAGS -Wl,--no-gc-sections"
		fi
		;;
	haiku*)
		DEFINES="$DEFINES -DSYSTEM_NOT_SUPPORTING_D_TYPE"
		# Needs -lnetwork for the timidity MIDI driver
		LIBS="$LIBS -lnetwork"
		_seq_midi=no
		;;
	irix*)
		DEFINES="$DEFINES -DIRIX"
		DEFINES="$DEFINES -DSYSTEM_NOT_SUPPORTING_D_TYPE"
		LIBS="$LIBS -lmd -lfastm -lm"
		_ranlib=:
		;;
	linux* | uclinux*)
		# When not cross-compiling, enable large file support, but don't
		# care if getconf doesn't exist or doesn't recognize LFS_CFLAGS.
		if test -z "$_host"; then
			CXXFLAGS="$CXXFLAGS $(getconf LFS_CFLAGS 2>/dev/null)"
		fi
		;;
	maemo)
		DEFINES="$DEFINES -DMAEMO"
		;;
	mingw*)
		DEFINES="$DEFINES -DWIN32"
		DEFINES="$DEFINES -D__USE_MINGW_ANSI_STDIO=0"
		LDFLAGS="$LDFLAGS -static-libgcc -static-libstdc++"
		LIBS="$LIBS -lmingw32 -lwinmm -lgdi32"
		add_line_to_config_mk 'WIN32 = 1'
		;;
	mint*)
		DEFINES="$DEFINES -DSYSTEM_NOT_SUPPORTING_D_TYPE"
		;;
	n64)
		DEFINES="$DEFINES -D__N64__"
		DEFINES="$DEFINES -DLIMIT_FPS"
		DEFINES="$DEFINES -DNONSTANDARD_PORT"
		DEFINES="$DEFINES -DDISABLE_COMMAND_LINE"
		DEFINES="$DEFINES -DDISABLE_DEFAULT_SAVEFILEMANAGER"
		DEFINES="$DEFINES -DDISABLE_DOSBOX_OPL"
		DEFINES="$DEFINES -DDISABLE_FANCY_THEMES"
		DEFINES="$DEFINES -DDISABLE_NES_APU"
		DEFINES="$DEFINES -DDISABLE_SID"
		DEFINES="$DEFINES -DREDUCE_MEMORY_USAGE"
		;;
	ps2)
		CXXFLAGS="$CXXFLAGS -G2"
		DEFINES="$DEFINES -D_EE"
		DEFINES="$DEFINES -D__PLAYSTATION2__"
		;;
	ps3)
		# Force use of SDL from the ps3 toolchain
		_sdlpath="$PS3DEV/portlibs/ppu:$PS3DEV/portlibs/ppu/bin"

		DEFINES="$DEFINES -DPLAYSTATION3"
		CXXFLAGS="$CXXFLAGS -mcpu=cell -mminimal-toc -I$PS3DEV/psl1ght/ppu/include -I$PS3DEV/portlibs/ppu/include"
		LDFLAGS="$LDFLAGS -L$PS3DEV/psl1ght/ppu/lib -L$PS3DEV/portlibs/ppu/lib"
		add_line_to_config_mk 'PLAYSTATION3 = 1'
		add_line_to_config_h "#define PREFIX \"${prefix}\""
		;;
	psp)
		if test -d "$PSPDEV/psp/lib"; then
			LDFLAGS="$LDFLAGS -L$PSPDEV/psp/lib"
		fi
		LDFLAGS="$LDFLAGS -L$PSPSDK/lib"
		LDFLAGS="$LDFLAGS -specs=$_srcdir/backends/platform/psp/psp.spec"
		_optimization_level=-O3
		CXXFLAGS="$CXXFLAGS -I$PSPSDK/include"
		# FIXME: Why is the following in CXXFLAGS and not in DEFINES? Change or document this.
		CXXFLAGS="$CXXFLAGS -D_PSP_FW_VERSION=150"
		;;
	solaris*)
		DEFINES="$DEFINES -DSOLARIS"
		DEFINES="$DEFINES -DSYSTEM_NOT_SUPPORTING_D_TYPE"
		# Needs -lbind -lsocket for the timidity MIDI driver
		LIBS="$LIBS -lnsl -lsocket"
		;;
	webos)
		CXXFLAGS="$CXXFLAGS --sysroot=$WEBOS_PDK/arm-gcc/sysroot"
		CXXFLAGS="$CXXFLAGS -I$WEBOS_PDK/include"
		CXXFLAGS="$CXXFLAGS -I$WEBOS_PDK/include/SDL"
		CXXFLAGS="$CXXFLAGS -I$WEBOS_PDK/device/usr/include"
		# These compiler options are needed to support the Palm Pixi
		CXXFLAGS="$CXXFLAGS -mcpu=arm1136jf-s"
		CXXFLAGS="$CXXFLAGS -mfpu=vfp "
		CXXFLAGS="$CXXFLAGS -mfloat-abi=softfp"
		LDFLAGS="$LDFLAGS -L$WEBOS_PDK/device/lib"
		LDFLAGS="$LDFLAGS -L$WEBOS_PDK/device/usr/lib"
		LDFLAGS="$LDFLAGS -Wl,--allow-shlib-undefined"
		LDFLAGS="$LDFLAGS --sysroot=$WEBOS_PDK/arm-gcc/sysroot"
		add_line_to_config_mk "WEBOS_SDK = $WEBOS_SDK"
		_seq_midi=no
		;;
	wii)
		_optimization_level=-Os
		CXXFLAGS="$CXXFLAGS -mrvl"
		CXXFLAGS="$CXXFLAGS -mcpu=750"
		CXXFLAGS="$CXXFLAGS -meabi"
		CXXFLAGS="$CXXFLAGS -mhard-float"
		CXXFLAGS="$CXXFLAGS -ffunction-sections"
		CXXFLAGS="$CXXFLAGS -fdata-sections"
		CXXFLAGS="$CXXFLAGS -fmodulo-sched"
		CXXFLAGS="$CXXFLAGS -fuse-cxa-atexit"
		CXXFLAGS="$CXXFLAGS -I$DEVKITPRO/libogc/include"
		# libogc is required to link the cc tests (includes _start())
		LDFLAGS="$LDFLAGS -mrvl"
		LDFLAGS="$LDFLAGS -mcpu=750"
		LDFLAGS="$LDFLAGS -L$DEVKITPRO/libogc/lib/wii"
		LDFLAGS="$LDFLAGS -logc"
		if test "$_dynamic_modules" = "yes" ; then
			# retarded toolchain patch forces --gc-sections, overwrite it
			LDFLAGS="$LDFLAGS -Wl,--no-gc-sections"
		fi
		;;
	wince)
		_optimization_level=-O3
		CXXFLAGS="$CXXFLAGS -fno-inline-functions"
		CXXFLAGS="$CXXFLAGS -march=armv4"
		CXXFLAGS="$CXXFLAGS -mtune=xscale"
		DEFINES="$DEFINES -D_WIN32_WCE=300"
		DEFINES="$DEFINES -D__ARM__"
		DEFINES="$DEFINES -D_ARM_"
		DEFINES="$DEFINES -DUNICODE"
		DEFINES="$DEFINES -DFPM_DEFAULT"
		DEFINES="$DEFINES -DNONSTANDARD_PORT"
		DEFINES="$DEFINES -DWRAP_MALLOC"
		DEFINES="$DEFINES -DWIN32"
		DEFINES="$DEFINES -Dcdecl="
		DEFINES="$DEFINES -D__cdecl__="
		add_line_to_config_mk "WRAP_MALLOC = 1"
		;;
esac

if test -n "$_host"; then
	# Cross-compiling mode - add your target here if needed
	echo "Cross-compiling to $_host"
	case "$_host" in
		android | android-v7a)
			# we link a .so as default
			LDFLAGS="$LDFLAGS -shared"
			LDFLAGS="$LDFLAGS -Wl,-Bsymbolic,--no-undefined"
			HOSTEXEPRE=lib
			HOSTEXEEXT=.so
			_backend="android"
			_port_mk="backends/platform/android/android.mk"
			_build_scalers=no
			_seq_midi=no
			_mt32emu=no
			_timidity=no
			;;
		arm-linux|arm*-linux-gnueabi|arm-*-linux)
			;;
		arm-riscos|linupy)
			DEFINES="$DEFINES -DLINUPY"
			;;
		bada)
			_unix=yes
			_backend="bada"
			_port_mk="backends/platform/bada/bada.mk"
			if test "$_debug_build" = yes; then
				_arm_asm=no
			else
				_arm_asm=yes
			fi
			_taskbar=no
			_build_scalers=no
			_seq_midi=no
			_mt32emu=no
			_timidity=no
			_vkeybd=yes
			;;
		bfin*)
			;;
		caanoo)
			# This uses the GPH backend.
			DEFINES="$DEFINES -DGPH_DEVICE"
			DEFINES="$DEFINES -DCAANOO"
			DEFINES="$DEFINES -DREDUCE_MEMORY_USAGE"
			if test "$_debug_build" = yes; then
				DEFINES="$DEFINES -DGPH_DEBUG"
			else
				# Use -O3 on the Caanoo for non-debug builds.
				_optimization_level=-O3
			fi
			CXXFLAGS="$CXXFLAGS -mcpu=arm926ej-s"
			CXXFLAGS="$CXXFLAGS -mtune=arm926ej-s"
			ASFLAGS="$ASFLAGS"
			_backend="gph"
			_build_hq_scalers=no
			_savegame_timestamp=no
			_vkeybd=yes
			_seq_midi=no
			_mt32emu=no
			_timidity=no
			_port_mk="backends/platform/gph/caanoo-bundle.mk"
			;;
		*darwin*)
			_ranlib=$_host-ranlib
			_strip=$_host-strip
			;;
		dingux)
			DEFINES="$DEFINES -DDINGUX"
			DEFINES="$DEFINES -DDISABLE_DOSBOX_OPL"
			DEFINES="$DEFINES -DREDUCE_MEMORY_USAGE"
			ASFLAGS="$ASFLAGS"
			CXXFLAGS="$CXXFLAGS -msoft-float"
			CXXFLAGS="$CXXFLAGS -mips32"
			_backend="dingux"
			_mt32emu=no
			_vkeybd=yes
			_build_hq_scalers=no
			_keymapper=no
			# Force disable vorbis on dingux, it has terrible performance compared to tremor
			_vorbis=no
			# Force disable seq on dingux, no way to use it and it would get enabled by default with configure
			_seq_midi=no
			_port_mk="backends/platform/dingux/dingux.mk"
			;;
		dreamcast)
			DEFINES="$DEFINES -DDISABLE_DEFAULT_SAVEFILEMANAGER"
			DEFINES="$DEFINES -DDISABLE_TEXT_CONSOLE"
			DEFINES="$DEFINES -DDISABLE_COMMAND_LINE"
			if test "$_release_build" = yes; then
				DEFINES="$DEFINES -DNOSERIAL"
			fi
			_optimization_level=-O3
			CXXFLAGS="$CXXFLAGS -funroll-loops"
			CXXFLAGS="$CXXFLAGS -fschedule-insns2"
			CXXFLAGS="$CXXFLAGS -fomit-frame-pointer"
			CXXFLAGS="$CXXFLAGS -fdelete-null-pointer-checks"
			_backend="dc"
			_build_scalers=no
			_mad=yes
			_zlib=yes
			add_line_to_config_mk 'ronindir = /usr/local/ronin'
			_port_mk="backends/platform/dc/dreamcast.mk"
			;;
		ds)
			DEFINES="$DEFINES -DDISABLE_COMMAND_LINE"
			DEFINES="$DEFINES -DDISABLE_DEFAULT_SAVEFILEMANAGER"
			DEFINES="$DEFINES -DDISABLE_DOSBOX_OPL"
			DEFINES="$DEFINES -DDISABLE_FANCY_THEMES"
			DEFINES="$DEFINES -DDISABLE_SID"
			DEFINES="$DEFINES -DDISABLE_NES_APU"
			DEFINES="$DEFINES -DDISABLE_TEXT_CONSOLE"
			DEFINES="$DEFINES -DREDUCE_MEMORY_USAGE"
			DEFINES="$DEFINES -DSTREAM_AUDIO_FROM_DISK"
			DEFINES="$DEFINES -DVECTOR_RENDERER_FORMAT=1555"
			_backend="ds"
			_build_scalers=no
			_mt32emu=no
			_port_mk="backends/platform/ds/ds.mk"
			;;
		gamecube)
			_backend="wii"
			_build_scalers=no
			_vkeybd=yes
			_mt32emu=no
			_port_mk="backends/platform/wii/wii.mk"
			add_line_to_config_mk 'GAMECUBE = 1'
			add_line_to_config_h '#define AUDIO_REVERSE_STEREO'
			add_line_to_config_h '#define GAMECUBE'
			add_line_to_config_h "/* #define DEBUG_WII_USBGECKO */"
			add_line_to_config_h "/* #define DEBUG_WII_MEMSTATS */"
			add_line_to_config_h "/* #define DEBUG_WII_GDB */"
			add_line_to_config_h "#define USE_WII_DI"
			;;
		gp2x)
			# This uses the GPH backend.
			DEFINES="$DEFINES -DGPH_DEVICE"
			DEFINES="$DEFINES -DGP2X"
			DEFINES="$DEFINES -DREDUCE_MEMORY_USAGE"
			if test "$_debug_build" = yes; then
				DEFINES="$DEFINES -DGPH_DEBUG"
			fi
			CXXFLAGS="$CXXFLAGS -march=armv4t"
			ASFLAGS="$ASFLAGS -mfloat-abi=soft"
			LDFLAGS="$LDFLAGS -static"
			_backend="gph"
			_build_hq_scalers=no
			_savegame_timestamp=no
			_vkeybd=yes
			_seq_midi=no
			_mt32emu=no
			_timidity=no
			_port_mk="backends/platform/gph/gp2x-bundle.mk"
			;;
		gp2xwiz)
			# This uses the GPH backend.
			DEFINES="$DEFINES -DGPH_DEVICE"
			DEFINES="$DEFINES -DGP2XWIZ"
			DEFINES="$DEFINES -DREDUCE_MEMORY_USAGE"
			if test "$_debug_build" = yes; then
				DEFINES="$DEFINES -DGPH_DEBUG"
			fi
			CXXFLAGS="$CXXFLAGS -mcpu=arm926ej-s"
			CXXFLAGS="$CXXFLAGS -mtune=arm926ej-s"
			ASFLAGS="$ASFLAGS -mfloat-abi=soft"
			_backend="gph"
			_build_hq_scalers=no
			_savegame_timestamp=no
			_vkeybd=yes
			_seq_midi=no
			_mt32emu=no
			_timidity=no
			_port_mk="backends/platform/gph/gp2xwiz-bundle.mk"
			;;
		iphone)
			DEFINES="$DEFINES -DIPHONE"
			_backend="iphone"
			_build_hq_scalers=no
			_seq_midi=no
			;;
		m68k-atari-mint)
			DEFINES="$DEFINES -DSYSTEM_NOT_SUPPORTING_D_TYPE"
			_ranlib=m68k-atari-mint-ranlib
			_ar="m68k-atari-mint-ar cru"
			_seq_midi=no
			;;
		maemo)
			_optimization_level=-Os
			CXXFLAGS="$CXXFLAGS -mcpu=arm926ej-s"
			CXXFLAGS="$CXXFLAGS -fomit-frame-pointer"
			INCLUDES="$INCLUDES -I/usr/X11R6/include"
			LIBS="$LIBS -lX11"
			LIBS="$LIBS -L/usr/lib"
			
			_backend="maemo"
			_vkeybd=yes
			_keymapper=yes
			_build_hq_scalers=no
			_mt32emu=no
			_alsa=no
			_mad=yes
			_tremor=yes
			_zlib=yes
			;;
		*mingw32*)
			_sdlconfig=$_host-sdl-config
			_windres=$_host-windres
			_ar="$_host-ar cru"
			_ranlib=$_host-ranlib
			;;
		mips-sgi*)
			LDFLAGS="$LDFLAGS -static-libgcc"
			LIBS="$LIBS -laudio"
			;;
		motoezx)
			DEFINES="$DEFINES -DMOTOEZX"
			ASFLAGS="$ASFLAGS -mfpu=vfp"
			_backend="linuxmoto"
			_build_hq_scalers=no
			_mt32emu=no
			_vkeybd=yes
			_seq_midi=no
			_port_mk="backends/platform/linuxmoto/linuxmoto.mk"
			;;
		motomagx)
			DEFINES="$DEFINES -DMOTOMAGX"
			ASFLAGS="$ASFLAGS -mfpu=vfp"
			_backend="linuxmoto"
			_build_hq_scalers=no
			_mt32emu=no
			_vkeybd=yes
			_seq_midi=no
			_port_mk="backends/platform/linuxmoto/linuxmoto.mk"
			;;
		n64)
			CXXFLAGS="$CXXFLAGS -mno-extern-sdata"
			CXXFLAGS="$CXXFLAGS --param max-inline-insns-auto=20"
			CXXFLAGS="$CXXFLAGS -fomit-frame-pointer"
			CXXFLAGS="$CXXFLAGS -march=vr4300"
			CXXFLAGS="$CXXFLAGS -mtune=vr4300"
			CXXFLAGS="$CXXFLAGS -mhard-float"
			LDFLAGS="$LDFLAGS -march=vr4300"
			LDFLAGS="$LDFLAGS -mtune=vr4300"
			LDFLAGS="$LDFLAGS -nodefaultlibs"
			LDFLAGS="$LDFLAGS -nostartfiles"
			LDFLAGS="$LDFLAGS -mno-crt0"
			LDFLAGS="$LDFLAGS -L$N64SDK/hkz-libn64"
			LDFLAGS="$LDFLAGS -L$N64SDK/lib"
			LDFLAGS="$LDFLAGS -T n64ld_cpp.x -Xlinker -Map -Xlinker residualvm.map"
			_backend="n64"
			_mt32emu=no
			_build_scalers=no
			_savegame_timestamp=no
			_translation=no
			_keymapper=no
			_text_console=no
			_vkeybd=yes
			_dynamic_modules=no
			_plugins_default=static
			# Force use of libmad, libtremor and zlib
			_mad=no
			_tremor=yes
			_zlib=yes
			_port_mk="backends/platform/n64/n64.mk"
			;;
		neuros)
			DEFINES="$DEFINES -DNEUROS"
			_backend='null'
			_build_hq_scalers=no
			_mt32emu=no
			;;
		openpandora)
			DEFINES="$DEFINES -DOPENPANDORA"
			DEFINES="$DEFINES -DREDUCE_MEMORY_USAGE"
			if test "$_release_build" = no; then
				DEFINES="$DEFINES -DOP_DEBUG"
			else
				# Use -O3 on the OpenPandora for non-debug builds.
				_optimization_level=-O3
			fi
			CXXFLAGS="$CXXFLAGS -march=armv7-a"
			CXXFLAGS="$CXXFLAGS -mtune=cortex-a8"
			CXXFLAGS="$CXXFLAGS -mfpu=neon"
			ASFLAGS="$ASFLAGS -mfloat-abi=soft"
			_backend="openpandora"
			_build_hq_scalers=yes
			_vkeybd=no
			_mt32emu=no
			_seq_midi=no
			_port_mk="backends/platform/openpandora/op-bundle.mk"
			;;
		ppc-amigaos)
			;;
		ps2)
			DEFINES="$DEFINES -DDISABLE_TEXT_CONSOLE"
			DEFINES="$DEFINES -DDISABLE_COMMAND_LINE"
			DEFINES="$DEFINES -DDISABLE_DOSBOX_OPL"
			DEFINES="$DEFINES -DDISABLE_SID"
			DEFINES="$DEFINES -DDISABLE_NES_APU"
			_backend="ps2"
			_build_scalers=no
			_mt32emu=no
			# HACK to enable mad & zlib (they are not properly detected due to linker issues).
			# This trick doesn't work for tremor right now, as the PS2 port the resulting library
			# libtremor, while our code later on expects it to be called libvorbisidec.
			# TODO: Enable tremor, e.g. by adding  -ltremor or by renaming the lib.
			_mad=yes
			_zlib=yes
			# HACK to fix compilation of C source files for now.
			add_line_to_config_mk 'CC = ee-gcc'
			# HACK to fix linking for now. It seems ee-g++ does not handle linking correctly.
			LD=ee-gcc

			if test "$_debug_build" = yes; then
				# TODO: Setup debug build properly
				DEFINES="$DEFINES -D__PS2_DEBUG__"
				#INCLUDES="$INCLUDES -I$(PS2GDB)/ee"
				#LDFLAGS="$LDFLAGS -L$(PS2GDB)/lib"
				LDFLAGS="$LDFLAGS -lps2gdbStub"
				LDFLAGS="$LDFLAGS -lps2ip"
				LDFLAGS="$LDFLAGS -ldebug"
			else
				# If not building for debug mode, strip binaries.
				CXXFLAGS="$CXXFLAGS -s"
			fi
			;;
		ps3)
			_mt32emu=no
			_timidity=no
			_vkeybd=yes
			;;
		psp)
			_backend="psp"
			_build_scalers=no
			_mt32emu=no
			_port_mk="backends/platform/psp/psp.mk"
			;;
		samsungtv)
			DEFINES="$DEFINES -DSAMSUNGTV"
			DEFINES="$DEFINES -DDISABLE_COMMAND_LINE"
			ASFLAGS="$ASFLAGS -mfpu=vfp"
			HOSTEXEEXT=".so"
			_backend="samsungtv"
			_mt32emu=no
			_vkeybd=yes
			;;
		webos)
			_backend="webos"
			_port_mk="backends/platform/webos/webos.mk"
			_build_scalers=yes
			_build_hq_scalers=no
			_timidity=no
			_mt32emu=no
			_seq_midi=no
			_vkeybd=no
			_keymapper=yes
			add_line_to_config_mk "HOST_COMPILER = `uname`"
			;;
		wii)
			_backend="wii"
			_build_scalers=no
			_vkeybd=yes
			_port_mk="backends/platform/wii/wii.mk"
			add_line_to_config_mk 'GAMECUBE = 0'
			add_line_to_config_h '#define AUDIO_REVERSE_STEREO'
			add_line_to_config_h "#define DEBUG_WII_USBGECKO"
			add_line_to_config_h "/* #define DEBUG_WII_MEMSTATS */"
			add_line_to_config_h "/* #define DEBUG_WII_GDB */"
			add_line_to_config_h "#define USE_WII_DI"
			add_line_to_config_h "#define USE_WII_SMB"
			add_line_to_config_h "#define USE_WII_KBD"
			;;
		wince)
			LDFLAGS="$LDFLAGS -Wl,--stack,65536"
			_tremolo=yes
			_backend="wince"
			_detectlang=yes
			_mt32emu=no
			_port_mk="backends/platform/wince/wince.mk"
			;;
		*)
			echo "WARNING: Unknown target, continuing with auto-detected values"
			;;
	esac
fi

#
# Determine whether host is POSIX compliant, or at least POSIX
# compatible enough to support our POSIX code (including dlsym(),
# mkdir() and some other APIs).
#
# TODO: Instead of basing this on the host name, we should really base
# this on the presence of features (such as the dlsym and mkdir APIs).
#
echo_n "Checking if host is POSIX compliant... "
case $_host_os in
	amigaos* | cygwin* | dreamcast | ds | gamecube | mingw* | n64 | ps2 | ps3 | psp | wii | wince)
		_posix=no
		;;
	android | beos* | bsd* | darwin* | freebsd* | gph-linux | haiku* | hpux* | iphone | irix* | linux* | maemo | mint* | netbsd* | openbsd* | solaris* | sunos* | uclinux* | webos)
		_posix=yes
		;;
	os2-emx*)
		_posix=yes	# FIXME: Really???
		;;
	*)
		# given this is a shell script, we might assume some type of posix.
		# However, the host system might be a totally different one, so
		# we can assume nothing about it.
		# Indeed, as mentioned further above, we really should test for the
		# presences of relevant APIs on the host anyway...
		_posix=no
		;;
esac
echo $_posix

if test "$_posix" = yes ; then
	DEFINES="$DEFINES -DPOSIX"
	add_line_to_config_mk 'POSIX = 1'
fi

#
# Check whether to enable a verbose build
#
echo_n "Checking whether to have a verbose build... "
echo "$_verbose_build"
add_to_config_mk_if_yes "$_verbose_build" 'VERBOSE_BUILD = 1'


#
# If a specific optimization level was requested, enable optimizations
#
if test -n "$_optimization_level" ; then
	# Ports will specify an optimization level and expect that to be enabled
	if test "$_optimizations" != no ; then
		_optimizations=yes
	fi
else
	_optimization_level=$_default_optimization_level
fi

#
# Check whether to enable optimizations
#
if test "$_optimizations" = yes ; then
	# Enable optimizations. This also
	# makes it possible to use -Wuninitialized, so let's do that.
	CXXFLAGS="$CXXFLAGS $_optimization_level"
	CXXFLAGS="$CXXFLAGS -Wuninitialized"
fi

#
# Check for math lib
#
cat > $TMPC << EOF
int main(void) { return 0; }
EOF
cc_check -lm && LIBS="$LIBS -lm"

#
# Check for Ogg Vorbis
#
echocheck "Ogg Vorbis"
if test "$_vorbis" = auto ; then
	_vorbis=no
	cat > $TMPC << EOF
#include <vorbis/codec.h>
int main(void) { vorbis_packet_blocksize(0,0); return 0; }
EOF
	cc_check $OGG_CFLAGS $OGG_LIBS $VORBIS_CFLAGS $VORBIS_LIBS \
		-lvorbisfile -lvorbis -logg && _vorbis=yes
fi
if test "$_vorbis" = yes ; then
	LIBS="$LIBS $OGG_LIBS $VORBIS_LIBS -lvorbisfile -lvorbis -logg"
	INCLUDES="$INCLUDES $OGG_CFLAGS $VORBIS_CFLAGS"
fi
define_in_config_if_yes "$_vorbis" 'USE_VORBIS'
echo "$_vorbis"

#
# Check for Tremor
#
echocheck "Tremor"
if test "$_tremolo" = yes ; then
	_tremor=yes
fi

if test "$_tremor" = auto ; then
	_tremor=no
	cat > $TMPC << EOF
#include <tremor/ivorbiscodec.h>
int main(void) { vorbis_info_init(0); return 0; }
EOF
	cc_check $TREMOR_CFLAGS $TREMOR_LIBS -lvorbisidec && \
	_tremor=yes
fi
if test "$_tremor" = yes && test "$_vorbis" = no; then
	add_line_to_config_h '#define USE_TREMOR'
	add_line_to_config_h '#define USE_VORBIS'
	if test "$_tremolo" = yes ; then
		add_line_to_config_h '#define USE_TREMOLO'
		LIBS="$LIBS $TREMOR_LIBS -ltremolo"
	else
		LIBS="$LIBS $TREMOR_LIBS -lvorbisidec"
	fi
	INCLUDES="$INCLUDES $TREMOR_CFLAGS"
else
	if test "$_vorbis" = yes; then
		_tremor="no (Ogg Vorbis/Tremor support is mutually exclusive)"
	fi
	add_line_to_config_h '#undef USE_TREMOR'
fi
add_to_config_mk_if_yes "$_tremor" 'USE_TREMOR = 1'
echo "$_tremor"

#
# Check for FLAC
#
echocheck "FLAC >= 1.0.1"
if test "$_flac" = auto ; then
	_flac=no
	cat > $TMPC << EOF
#include <FLAC/format.h>
int main(void) { return FLAC__STREAM_SYNC_LEN >> 30; /* guaranteed to be 0 */ }
EOF
	if test "$_vorbis" = yes ; then
		cc_check $FLAC_CFLAGS $FLAC_LIBS $OGG_CFLAGS $OGG_LIBS \
			-lFLAC -logg && _flac=yes
	else
		cc_check $FLAC_CFLAGS $FLAC_LIBS \
			-lFLAC && _flac=yes
	fi
fi
if test "$_flac" = yes ; then
	if test "$_vorbis" = yes ; then
		LIBS="$LIBS $FLAC_LIBS $OGG_LIBS -lFLAC -logg"
	else
		LIBS="$LIBS $FLAC_LIBS -lFLAC"
	fi
	INCLUDES="$INCLUDES $FLAC_CFLAGS"
fi
define_in_config_if_yes "$_flac" 'USE_FLAC'
echo "$_flac"

#
# Check for MAD (MP3 library)
#
echocheck "MAD"
if test "$_mad" = auto ; then
	_mad=no
	cat > $TMPC << EOF
#include <mad.h>
int main(void) { return 0; }
EOF
	cc_check $MAD_CFLAGS $MAD_LIBS -lmad && _mad=yes
fi
if test "$_mad" = yes ; then
	LIBS="$LIBS $MAD_LIBS -lmad"
	INCLUDES="$INCLUDES $MAD_CFLAGS"
fi
define_in_config_if_yes "$_mad" 'USE_MAD'
echo "$_mad"

#
# Check for ZLib
#
echocheck "zlib"
if test "$_zlib" = auto ; then
	_zlib=no
	cat > $TMPC << EOF
#include <string.h>
#include <zlib.h>
int main(void) { return strcmp(ZLIB_VERSION, zlibVersion()); }
EOF
	cc_check $ZLIB_CFLAGS $ZLIB_LIBS -lz && _zlib=yes
fi
if test "$_zlib" = yes ; then
	LIBS="$LIBS $ZLIB_LIBS -lz"
	INCLUDES="$INCLUDES $ZLIB_CFLAGS"
fi
define_in_config_if_yes "$_zlib" 'USE_ZLIB'
echo "$_zlib"

#
# Figure out installation directories
#
test "x$prefix" = xNONE && prefix=/usr/local
test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'

DEFINES="$DEFINES -DDATA_PATH=\\\"$datadir\\\""

case $_backend in
	openpandora)
		# Add ../plugins as a path so plugins can be found when running from a .PND.
		DEFINES="$DEFINES -DPLUGIN_DIRECTORY=\\\"../plugins\\\""
		;;
	maemo | webos)
		# The WebOS and Maemo apps want the plugins in the "lib" directory
		# without a scummvm sub directory.
		DEFINES="$DEFINES -DPLUGIN_DIRECTORY=\\\"$libdir\\\""
		;;
	*)
		DEFINES="$DEFINES -DPLUGIN_DIRECTORY=\\\"$libdir/residualvm\\\""
		;;
esac

#
# Set variables for profiling.
# We need to do it here to prevent mess-ups with the tests e.g. on the PSP
#
if test "$_enable_prof" = yes ; then
	CXXFLAGS="$CXXFLAGS -pg"
	LDFLAGS="$LDFLAGS -pg"
	DEFINES="$DEFINES -DENABLE_PROFILING"
fi


#
# Some last-minute backend specific stuff, executed
# after all of CXXFLAGS, LDFLAGS, LIBS etc. have been setup
#
case $_backend in
	android)
		# ssp at this point so the cxxtests link
		if test "$_debug_build" = yes; then
			CXXFLAGS="$CXXFLAGS -fstack-protector"
		else
			CXXFLAGS="$CXXFLAGS -fno-stack-protector"
		fi

		static_libs=''
		system_libs=''
		for lib in $LIBS; do
			case $lib in
			-lz|-lm|-ldl)
				system_libs="$system_libs $lib"
				;;
			*)
				static_libs="$static_libs $lib"
				;;
			esac
		done

		# -lgcc is carefully placed here - we want to catch
		# all toolchain symbols in *our* libraries rather
		# than pick up anything unhygenic from the Android libs.
		LIBS="-Wl,-Bstatic $static_libs -Wl,-Bdynamic -lgcc $system_libs -llog -lGLESv1_CM"
		;;
	n64)
		# Move some libs down here, otherwise some symbols requires by libvorbis aren't found
		# during linking stage
		LIBS="$LIBS -lc -lgcc -lnosys"
		;;
esac



echo
echo "Creating config.h"
cat > config.h << EOF
/* This file is automatically generated by configure */
/* DO NOT EDIT MANUALLY */

#ifndef CONFIG_H
#define CONFIG_H

$_config_h_data

/* Data types */
typedef unsigned $type_1_byte byte;
typedef unsigned int uint;
typedef unsigned $type_1_byte uint8;
typedef unsigned $type_2_byte uint16;
typedef unsigned $type_4_byte uint32;
typedef signed $type_1_byte int8;
typedef signed $type_2_byte int16;
typedef signed $type_4_byte int32;
EOF

if test -n "$_def_64bit_type_unsigned"  ; then
cat >> config.h << EOF

/* 64-bit stuff */
$_def_64bit_type_signed
#if defined(__APPLE__) && !defined(__ppc__)
#ifndef _UINT64
#define _UINT64
$_def_64bit_type_unsigned
#endif
#else
$_def_64bit_type_unsigned
#endif
EOF
fi

cat >> config.h << EOF

#endif /* CONFIG_H */
EOF

echo "Creating config.mk"
cat > config.mk << EOF
# -------- Generated by configure -----------

CXX := $CXX
CXXFLAGS := $CXXFLAGS
LD := $LD
LIBS += $LIBS
RANLIB := $_ranlib
STRIP := $_strip
AR := $_ar
AS := $_as
ASFLAGS := $ASFLAGS
WINDRES := $_windres
WINDRESFLAGS := $WINDRESFLAGS
STAGINGPATH=$_stagingpath
WIN32PATH=$_win32path
AOS4PATH=$_aos4path
STATICLIBPATH=$_staticlibpath

MODULES += $MODULES
MODULE_DIRS += $MODULE_DIRS
EXEPRE := $HOSTEXEPRE
EXEEXT := $HOSTEXEEXT

prefix = $prefix
exec_prefix = $exec_prefix
bindir = $bindir
libdir = $libdir
datarootdir = $datarootdir
datadir = $datadir
mandir = $mandir
docdir = $docdir

$_config_mk_data

INCLUDES += $INCLUDES
OBJS += $OBJS
DEFINES += $DEFINES
LDFLAGS += $LDFLAGS

port_mk = $_port_mk

SAVED_CONFIGFLAGS  := $SAVED_CONFIGFLAGS
SAVED_LDFLAGS      := $SAVED_LDFLAGS
SAVED_CXX          := $SAVED_CXX
SAVED_CXXFLAGS     := $SAVED_CXXFLAGS
SAVED_CPPFLAGS     := $SAVED_CPPFLAGS
SAVED_ASFLAGS      := $SAVED_ASFLAGS
SAVED_WINDRESFLAGS := $SAVED_WINDRESFLAGS
EOF

#
# Create a custom Makefile when building outside the source tree
# TODO: Add a better check than just looking for 'Makefile'
#
if test ! -f Makefile.common ; then
echo "Creating Makefile"

cat > Makefile << EOF
# -------- Generated by configure -----------
srcdir = $_srcdir
vpath %.h \$(srcdir)
vpath %.cpp \$(srcdir)
vpath %.c \$(srcdir)
vpath %.m \$(srcdir)
vpath %.mm \$(srcdir)
vpath %.asm \$(srcdir)
vpath %.s \$(srcdir)
vpath %.S \$(srcdir)
include \$(srcdir)/Makefile
EOF

fi
